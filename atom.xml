<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雅途</title>
  
  <subtitle>Just do what you want!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yatus.cn/"/>
  <updated>2019-05-08T13:16:57.000Z</updated>
  <id>http://blog.yatus.cn/</id>
  
  <author>
    <name>yatus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux虚拟机三种网络介绍</title>
    <link href="http://blog.yatus.cn/2018/01/09/linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.yatus.cn/2018/01/09/linux虚拟机三种网络介绍/</id>
    <published>2018-01-09T08:48:30.000Z</published>
    <updated>2019-05-08T13:16:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --><h5 id="虚拟机三种网络模式介绍"><a href="#虚拟机三种网络模式介绍" class="headerlink" title="虚拟机三种网络模式介绍"></a>虚拟机三种网络模式介绍</h5><h6 id="bridged（桥接模式）"><a href="#bridged（桥接模式）" class="headerlink" title="bridged（桥接模式）"></a>bridged（桥接模式）</h6><p>&emsp;&emsp;在这种模式下，使用VMnet0虚拟交换机，虚拟机与物理机连的是同一个网络，虚拟机和物理机是并列关系，可以说是地位相同的，它可以访问网内任何一台机器。在桥接模式下，可以手工配置它的TCP/IP配置信息（IP、子网掩码等，而且还要和宿主机器处于同一网段），以实现通过局域网的网关或路由器访问互联网，还可以将IP地址和DNS设置成“自动获取”。如果网络环境是ip资源很缺少的下不太适用，可能造成ip冲突。<br><img src="bridged.png" alt><br>&emsp;&emsp;上图中，A、A1、B、C可以互相访问的，如果A可以访问外网，A1也可以访问外网。</p><h6 id="NAT（网络地址转换模式）"><a href="#NAT（网络地址转换模式）" class="headerlink" title="NAT（网络地址转换模式）"></a>NAT（网络地址转换模式）</h6><p>&emsp;&emsp;使用NAT模式，就是让虚拟机借助NAT（网络地址转换）功能，通过宿主机器所在的网络来访问公网，物理机充当了路由器的角色，如果物理机不能上网，那虚拟机也不能上网。这种模式的兼容性是非常好的，因为当物理机的网络环境变化时，虚拟机的网络并不会有影响。NAT模式下的虚拟机的TCP/IP配置信息是由VMnet8虚拟网络的DHCP服务器提供的，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。<br><img src="nat.png" alt><br>&emsp;&emsp;上图中，A、A1、A2是可以互相访问的，但A1和A2都不能访问B或C，相反地，B和C都不能访问A1和A2。另外如果A可以访问外网，A1、A2也可以访问外网。</p><h6 id="host-only（仅主机模式）"><a href="#host-only（仅主机模式）" class="headerlink" title="host-only（仅主机模式）"></a>host-only（仅主机模式）</h6><p>&emsp;&emsp;在host-only模式中，虚拟机只能与虚拟机、主机互访，但虚拟机和外部的网络是被隔离开的，也就是不能上Internet。在host-only模式下，虚拟系统的TCP/IP配置信息（如IP地址、网关地址、DNS服务器等），都是由VMnet1虚拟网络的DHCP服务器来动态分配的。<br><img src="host-only.png" alt><br>&emsp;&emsp;上图中，A、A1、A2是可以互相访问的，但A1和A2都不能访问B或C，相反地，B和C都不能访问A1和A2。即使A可以访问外网，A1、A2也是不可以访问外网。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --&gt;&lt;h5 id=&quot;虚拟机三种网络模式介绍&quot;&gt;&lt;a href=&quot;#虚拟机三种网络模式介绍&quot; class=&quot;headerlink&quot; title=&quot;虚拟机三种
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.yatus.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.yatus.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux常用基本命令</title>
    <link href="http://blog.yatus.cn/2018/01/08/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.yatus.cn/2018/01/08/linux常用基本命令/</id>
    <published>2018-01-08T02:37:18.000Z</published>
    <updated>2019-05-08T13:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man获得帮助信息"><a href="#man获得帮助信息" class="headerlink" title="man获得帮助信息"></a>man获得帮助信息</h3><ul><li>基本语法<br><code>man</code> [命令或配置文件]</li><li>显示说明</li></ul><table><thead><tr><th>信息</th><th>描述</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的具体描述</td></tr><tr><td>EXAMPLES</td><td>使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题（通常是手册页）</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man ls #查看ls命令的帮助信息</span><br><span class="line">man ps #查看ps命令的帮助信息</span><br></pre></td></tr></table></figure><h3 id="help-获得shell内置命令的帮助信息"><a href="#help-获得shell内置命令的帮助信息" class="headerlink" title="help 获得shell内置命令的帮助信息"></a>help 获得shell内置命令的帮助信息</h3><ul><li>基本语法<br><code>help</code> [命令]</li><li>案例实践<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help cd #查看cd命令的帮助信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl + l</td><td>清屏；</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>tab</td><td>命令补全</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr></tbody></table><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><p>&emsp;&emsp;在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。正确的关机流程为：<code>sync &gt; shutdown &gt; reboot &gt; halt</code></p><p>基本语法</p><ul><li><code>sync</code> （功能描述：将数据由内存同步到硬盘中）</li><li><code>halt</code> （功能描述：关闭系统，等同于shutdown -h now 和 poweroff）</li><li><code>reboot</code> 功能描述：就是重启，等同于 shutdown -r now）</li><li><code>shutdown</code>[选项] [参数]</li></ul><table><thead><tr><th>选项</th><th>功能</th><th>-</th><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>-h=halt关机</td><td></td><td>now</td><td>立刻关机</td></tr><tr><td>-r</td><td>-r=reboot重启</td><td></td><td>时间</td><td>等待多久后关机（时间单位是分钟）</td></tr></tbody></table><blockquote><p>Linux系统中为了提高磁盘的读写效率，对磁盘采取了 “预读迟写”操作方式。当用户保存文件时，Linux核心并不一定立即将保存数据写入物理磁盘中，而是将数据保存在缓冲区中，等缓冲区满时再写入磁盘，这种方式可以极大的提高磁盘写入数据的效率。但是，也带来了安全隐患，如果数据还未写入磁盘时，系统掉电或者其他严重问题出现，则将导致数据丢失。使用sync指令可以立即将缓冲区的数据写入磁盘。</p></blockquote><p>案例实践</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sync #将数据由内存同步到硬盘中 </span><br><span class="line">reboot #重启 </span><br><span class="line">halt #关机</span><br><span class="line">shutdown -h 1 &apos;This server will shutdown after 1 mins&apos; #计算机将在1分钟后关机，并且会显示在登录用户的当前屏幕中</span><br><span class="line">shutdown -h now #立马关机（等同于 halt）</span><br><span class="line">shutdown -r now #系统立马重启（等同于 reboot）</span><br></pre></td></tr></table></figure><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><h3 id="pwd-显示当前工作目录的绝对路径"><a href="#pwd-显示当前工作目录的绝对路径" class="headerlink" title="pwd 显示当前工作目录的绝对路径"></a>pwd 显示当前工作目录的绝对路径</h3><ul><li>基本语法<br><code>pwd</code></li><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root #进入目录</span><br><span class="line">pwd #显示当前工作目录，则是/root</span><br></pre></td></tr></table></figure><h3 id="ls-列出目录的内容"><a href="#ls-列出目录的内容" class="headerlink" title="ls 列出目录的内容"></a>ls 列出目录的内容</h3><ul><li>基本语法<br><code>ls</code> [选项] [目录或文件]</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-a</td><td>全部文件，包括隐藏的文件一起列举出来</td></tr><tr><td>-l</td><td>使用较长格式列出信息</td></tr></tbody></table><ul><li>使用-l参数显示说明<br>每行列出的信息一次是：<code>文件类型与权限</code>、<code>链接数</code>、<code>文件属主</code>、<code>文件属组</code>、<code>文件大小</code>、<code>建立或修改时间</code>、<code>名字</code></li><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al  # 查看当前目录的所有内容信息</span><br></pre></td></tr></table></figure><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><ul><li>基本语法<br><code>cd</code> [参数]</li><li>常用参数说明</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td>切换路径</td></tr><tr><td>cd 相对路径</td><td>切换路径</td></tr><tr><td>cd ~或 cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在的目录</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 假设当前用户是root</span><br><span class="line">cd /root/ #使用绝对路径切换到root目录</span><br><span class="line">mkdir doc #在当前目录创建doc目录</span><br><span class="line">cd doc/ #使用相对路径切换到doc目录</span><br><span class="line">cd ~ #回到自己的家目录，即/root</span><br><span class="line">cd - #回到上一次所在的目录，即/root/doc/</span><br><span class="line">cd .. #回到当前目录的上一级目录，即/root/</span><br></pre></td></tr></table></figure><h3 id="mkdir-创建一个新的目录"><a href="#mkdir-创建一个新的目录" class="headerlink" title="mkdir 创建一个新的目录"></a>mkdir 创建一个新的目录</h3><ul><li>基本语法<br><code>mkdir</code> [选项] 要创建的目录</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 假设当前用户是root</span><br><span class="line">cd ~ #回到家目录，就/root/</span><br><span class="line">mkdir yatus #创建空目录</span><br><span class="line">mkdir yatus/docs #在yatus目录内创建子目录docs</span><br><span class="line">mkdir yatus/test/docs #创建多级目录</span><br></pre></td></tr></table></figure><h3 id="rmdir-删除一个空的目录"><a href="#rmdir-删除一个空的目录" class="headerlink" title="rmdir 删除一个空的目录"></a>rmdir 删除一个空的目录</h3><ul><li>基本语法<br><code>rmdir</code> 要删除的空目录</li><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 假设当前用户是root</span><br><span class="line">cd ~ #回到家目录，就/root/</span><br><span class="line">rmdir yatus/docs #删除一个空的目录，如果为空会报错，需要使用rm命令删除</span><br></pre></td></tr></table></figure><h3 id="touch-创建空的文件"><a href="#touch-创建空的文件" class="headerlink" title="touch 创建空的文件"></a>touch 创建空的文件</h3><ul><li>基本语法<br>touch 文件名称</li><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">touch test/docs/doc.txt #创建空文件</span><br></pre></td></tr></table></figure><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><ul><li><p>基本语法<br><code>cp</code> [选项] source dest （复制source到dest）</p><blockquote><p>tips：强制覆盖不提示的方法：<code>\cp</code></p></blockquote></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table><ul><li>参数说明</li></ul><table><thead><tr><th>参数</th><th>备注</th></tr></thead><tbody><tr><td>source</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">cp test/docs/doc.txt test/ #复制文件</span><br><span class="line">cp test/ ./ #递归复制整个文件夹</span><br></pre></td></tr></table></figure><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm 移除文件或目录"></a>rm 移除文件或目录</h3><ul><li>基本语法<br><code>rm</code> [选项] 需要删除的文件或目录</li><li>选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录中的所有内容</td></tr><tr><td>-f</td><td>强制执行删除操作，而不提示用于进行确认</td></tr><tr><td>-v</td><td>显示执行的详细执行过程</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">rm test/doc.txt #删除目录中的文件</span><br><span class="line">rm -rf test/ #递归删除目录中的所有内容</span><br></pre></td></tr></table></figure><h3 id="mv-移动文件或目录和重命名文件或目录"><a href="#mv-移动文件或目录和重命名文件或目录" class="headerlink" title="mv 移动文件或目录和重命名文件或目录"></a>mv 移动文件或目录和重命名文件或目录</h3><ul><li><p>基本语法<br><code>mv</code> [选项] 源文件 目标文件 (重命名)<br><code>mv</code> [选项] 源文件 目录 (移动文件)<br><code>mv</code> [选项] 目录 源文件 (移动文件)</p></li><li><p>选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-f</td><td>覆盖前不询问</td></tr><tr><td>-v</td><td>显示执行的详细执行过程</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">mkdir source dest #创建目录</span><br><span class="line">touch source/source.txt #创建文件</span><br><span class="line">mv source/source.txt source/source.log #重名令</span><br><span class="line">mv source/source.log dest #移动文件</span><br></pre></td></tr></table></figure><h3 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat 查看文件内容"></a>cat 查看文件内容</h3><ul><li><p>基本语法<br><code>cat</code> [选项] 要查看的文件</p><blockquote><p>查看文件内容，从第一行开始显示，一般查看比较小的文件</p></blockquote></li><li><p>选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-n</td><td>显示所有行的行号，包括空行</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">cat -n dest/source.log dest #查看文件内容并显示行号</span><br></pre></td></tr></table></figure><h3 id="more-文件内容分屏查看"><a href="#more-文件内容分屏查看" class="headerlink" title="more 文件内容分屏查看"></a>more 文件内容分屏查看</h3><ul><li><p>基本语法<br><code>more</code> 要查看的文件</p><blockquote><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见常用操作说明。</p></blockquote></li><li><p>常用操作说明</p></li></ul><table><thead><tr><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻一页</td></tr><tr><td>Enter</td><td>向下翻一行</td></tr><tr><td>q</td><td>离开more，不在显示该文件的内容</td></tr><tr><td>ctrl + F</td><td>向下滚动一屏</td></tr><tr><td>ctrl + B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前的行号</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">more anaconda-ks.cfg #採用more查看文件</span><br></pre></td></tr></table></figure><h3 id="less-分屏显示文件内容"><a href="#less-分屏显示文件内容" class="headerlink" title="less 分屏显示文件内容"></a>less 分屏显示文件内容</h3><ul><li><p>基本语法<br><code>less</code> 要查看的文件</p><blockquote><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。<strong>less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</strong>。</p></blockquote></li><li><p>常用操作说明</p></li></ul><table><thead><tr><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>空白键</td><td>向下一页</td></tr><tr><td>q</td><td>离开less，不在显示该文件的内容</td></tr><tr><td>[pagedown]</td><td>向下翻一屏</td></tr><tr><td>[pageup]</td><td>向上翻一屏</td></tr><tr><td>/字符串</td><td>向下搜索字符串的功能；n：向下查找；N：向上查找</td></tr><tr><td>?字符串</td><td>向上搜索字符串的功能；n：向上查找；N：向下查找</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #回到自己的家目录</span><br><span class="line">less anaconda-ks.cfg #採用less查看文件</span><br></pre></td></tr></table></figure><h3 id="echo-输出内容"><a href="#echo-输出内容" class="headerlink" title="echo 输出内容"></a>echo 输出内容</h3><ul><li><p>基本语法<br><code>echo</code> [选项] [输出内容]</p></li><li><p>选项</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-e</td><td>支持反斜线控制的字符转换</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello\twrorld&quot;</span><br><span class="line">echo -e &quot;hello\twrorld&quot;</span><br></pre></td></tr></table></figure><h3 id="head-显示文件头部内容"><a href="#head-显示文件头部内容" class="headerlink" title="head 显示文件头部内容"></a>head 显示文件头部内容</h3><ul><li><p>基本语法<br><code>head</code> [选项] 文件</p><blockquote><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容。</p></blockquote></li><li><p>选项</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-n &lt;行数&gt;</td><td>指定显示头部内容的n行内容</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">head -n 2 anaconda-ks.cfg #查看文件的头2行</span><br></pre></td></tr></table></figure><h3 id="tail-显示文件尾部内容"><a href="#tail-显示文件尾部内容" class="headerlink" title="tail 显示文件尾部内容"></a>tail 显示文件尾部内容</h3><ul><li><p>基本语法<br><code>tail</code> [选项] 文件</p><blockquote><p>tail用于显示文件的开头部分内容，默认情况下tail指令显示文件的后10行内容。</p></blockquote></li><li><p>选项</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-n &lt;行数&gt;</td><td>指定显示尾部内容的n行内容</td></tr><tr><td>-f</td><td>显示文件最新追加的内容监听文件变化</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">tail -n 2 anaconda-ks.cfg #查看文件的后2行</span><br><span class="line">tail -f anaconda-ks.cfg #实时追踪文件的更新</span><br></pre></td></tr></table></figure><h3 id="gt-输出重定向和-gt-gt-追加"><a href="#gt-输出重定向和-gt-gt-追加" class="headerlink" title="&gt; 输出重定向和 &gt;&gt; 追加"></a>&gt; 输出重定向和 &gt;&gt; 追加</h3><ul><li><p>基本语法<br><code>ls -al &gt; 文件</code> 将列表的内容写入到具体的文件中（覆盖写）<br><code>ls -al &gt;&gt; 文件</code> 将列表的内容追加到具体的文件的末尾</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">ls -al &gt; yatus.txt #将ls查看信息写入到文件中</span><br><span class="line">ls -al &gt;&gt; yatus.txt #将ls查看信息追加到文件中</span><br><span class="line">echo hello &gt;&gt; yatus.txt  #采用echo将hello追加到文件中</span><br></pre></td></tr></table></figure><h3 id="ln-软连接"><a href="#ln-软连接" class="headerlink" title="ln 软连接"></a>ln 软连接</h3><ul><li><p>基本语法<br><code>ls -s</code> [原文件或目录] [软连接名]</p><blockquote><p>软链接也成为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。<br>删除软链接：<code>rm -rf 软链接名</code>，而不是<code>rm -rf 软链接名/</code><br>查询：通过<code>ls -al</code>就可以查看，列表属性第1位是l，尾部会有位置指向。</p></blockquote></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">mkdir yatus</span><br><span class="line">touch yatus/log.txt</span><br><span class="line">ln -s yatus/log.txt ./log #创建软连接</span><br><span class="line">ls -al #查看软连接</span><br><span class="line">rm -rf log #删除软连接</span><br><span class="line"></span><br><span class="line">ln -s yatus/ ./yatu #创建软连接</span><br><span class="line">cd -P yatu #进入软连接实际物理路径</span><br></pre></td></tr></table></figure><h3 id="history-查看执行命令历史"><a href="#history-查看执行命令历史" class="headerlink" title="history 查看执行命令历史"></a>history 查看执行命令历史</h3><ul><li>基本语法<br><code>history</code></li><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history #查看已经执行过的历史命令</span><br></pre></td></tr></table></figure><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><h3 id="date时间类"><a href="#date时间类" class="headerlink" title="date时间类"></a>date时间类</h3><ul><li>基本语法<br><code>date</code> [选项] [+格式]</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-d &lt;时间字符串&gt;</td><td>显示指定的“时间字符串”表示的时间，而非当前时间</td></tr><tr><td>-s &lt;时间日期&gt;</td><td>设置系统日期时间</td></tr></tbody></table><ul><li>常用格式说明</li></ul><table><thead><tr><th>格式</th><th>备注</th></tr></thead><tbody><tr><td>+%Y</td><td>年份</td></tr><tr><td>+%m</td><td>月份</td></tr><tr><td>+%d</td><td>天</td></tr><tr><td>+%H</td><td>时</td></tr><tr><td>+%M</td><td>分</td></tr><tr><td>+%S</td><td>秒</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">date #显示当前时间</span><br><span class="line">date +%Y #显示当前年份</span><br><span class="line">date +%m #显示当前月份</span><br><span class="line">date +%m #显示当前是哪一天</span><br><span class="line">date +%Y-%m-%d #显示当前年月日</span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot; #显示当前年月日时分秒（注意：如果带有空格的格式，需要带上引号）</span><br><span class="line"></span><br><span class="line">date -d &apos;1 days ago&apos; #显示昨天时间</span><br><span class="line">date -d &apos;-1 days ago&apos; #显示明天时间</span><br><span class="line"></span><br><span class="line">date -s &apos;2016-05-06 09:57:18&apos; #设置系统当前时间</span><br></pre></td></tr></table></figure><h3 id="cal日期类"><a href="#cal日期类" class="headerlink" title="cal日期类"></a>cal日期类</h3><ul><li>基本语法<br><code>cal</code> [选项]<blockquote><p>不加选项，默认显示本月日历</p></blockquote></li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>具体某一年</td><td>显示这一年的日历</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cal #查看当月的日历</span><br><span class="line">cal 2017 #查看2017年整年的日历</span><br></pre></td></tr></table></figure><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h3 id="useradd-添加新用户"><a href="#useradd-添加新用户" class="headerlink" title="useradd 添加新用户"></a>useradd 添加新用户</h3><ul><li><p>基本语法<br><code>useradd</code> [选项] 用户名</p><blockquote><p>在没有指定<code>-d</code>选项的情况下,系统默认会在’/home’目录下创建和用户同名的家目录</p></blockquote></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-g 组名</td><td>添加新用户到指定的组</td></tr><tr><td>-d 指定家目录</td><td>添加新用户到指定的家目录，<strong>需要注意的是，指定的家目录尽量是不存在的，不然会出现错误警告</strong></td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd yatu #添加新用户yatu</span><br><span class="line">useradd -g yatus yatus #添加新用户使用指定的组</span><br><span class="line">useradd -d admin -g admin admin ##添加新用户使用指定的组和家目录</span><br></pre></td></tr></table></figure><h3 id="passwd-设置用户密码"><a href="#passwd-设置用户密码" class="headerlink" title="passwd 设置用户密码"></a>passwd 设置用户密码</h3><ul><li><p>基本语法<br><code>passwd</code> 用户名</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd yatu #设置用户密码</span><br></pre></td></tr></table></figure><h3 id="usermod-修改用户"><a href="#usermod-修改用户" class="headerlink" title="usermod 修改用户"></a>usermod 修改用户</h3><ul><li><p>基本语法<br><code>usermod</code> [选项] 用户名</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-g</td><td>修改用户的吃书登录组，给定的组必须存在</td></tr><tr><td>-d 指定家目录</td><td>添加用户到指定的家目录</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g root yatu</span><br></pre></td></tr></table></figure><h3 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel 删除用户"></a>userdel 删除用户</h3><ul><li><p>基本语法<br><code>userdel</code> [选项] 用户名</p><blockquote><p>在不指定<code>-r</code>选项的时候，默认是保留家目录的</p></blockquote></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-r</td><td>删除用户，不保留家目录</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r yatu #删除用户，且不保留家目录</span><br></pre></td></tr></table></figure><h3 id="id-查看用户是否存在"><a href="#id-查看用户是否存在" class="headerlink" title="id 查看用户是否存在"></a>id 查看用户是否存在</h3><ul><li><p>基本语法<br><code>id</code> 用户名</p><blockquote><p>当用户不存在的时候，返回无此用户提示，否则返回<code>用户id</code>、<code>所在组的id</code>和<code>组名</code></p></blockquote></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id yatu #查看用户是否存在</span><br></pre></td></tr></table></figure><h3 id="su-切换用户"><a href="#su-切换用户" class="headerlink" title="su 切换用户"></a>su 切换用户</h3><ul><li><p>基本语法<br><code>su</code> - 需要切换的用户名</p><blockquote><p>在操作的过程中，如果当前用户的权限不够，可以通过<code>su -</code>指令，切换到高权限用户；<br>从权限搞的用户切换到权限低的用户时，不需要输入密码，反之需要；<br>若需要返回到原来用户时，使用<code>exit</code>命令即可；<br>需要注意的是，如果<code>su -</code>中去掉<code>-</code>，切换过去的时候，不能获取该用户的华宁变量及执行权限</p></blockquote></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - yatu #切换到yatu用户</span><br></pre></td></tr></table></figure><h3 id="who-am-i和whoami-查询当前用户信息"><a href="#who-am-i和whoami-查询当前用户信息" class="headerlink" title="who am i和whoami 查询当前用户信息"></a>who am i和whoami 查询当前用户信息</h3><ul><li><p>基本语法<br><code>whoami</code> （显示自身用户名称）<br><code>who am i</code> （显示登录用户的用户名）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whoami #显示自身用户名称</span><br><span class="line">who am i #显示登录用户的用户名</span><br></pre></td></tr></table></figure><h3 id="sudo-设置普通用户具有root权限"><a href="#sudo-设置普通用户具有root权限" class="headerlink" title="sudo 设置普通用户具有root权限"></a>sudo 设置普通用户具有root权限</h3><ul><li><p>以root身份添加yatus用户，并对其设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd yatus  #新增yauts</span><br><span class="line">passwd yatus #设置yauts登录密码</span><br></pre></td></tr></table></figure></li><li><p>需改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 修改/etc/sudoers文件，找到100行，在root下面添加一行，如下所示：</span><br><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">yatus    ALL=(ALL)       ALL</span><br><span class="line"># 或者配置成采用sudo命令时，不需要输入密码</span><br><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">yatus    ALL=(ALL)       NOPASSWD:ALL</span><br><span class="line">#修改完毕，就可以使用yatu账号登录，使用命令sudo，即可获得root的权限进行操作</span><br></pre></td></tr></table></figure></li></ul><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><blockquote><p>用户组类似于角色，每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同linux系统对用户组的规定有所不同，<br>如linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p></blockquote><h3 id="groupadd-新增用户组"><a href="#groupadd-新增用户组" class="headerlink" title="groupadd 新增用户组"></a>groupadd 新增用户组</h3><ul><li><p>基本语法<br><code>groupadd</code> 组名</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd test #添加一个test组</span><br></pre></td></tr></table></figure><h3 id="groupdel-删除用户组"><a href="#groupdel-删除用户组" class="headerlink" title="groupdel 删除用户组"></a>groupdel 删除用户组</h3><ul><li><p>基本语法<br><code>groupdel</code> 组名</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel test #删除test组</span><br></pre></td></tr></table></figure><h3 id="groupmod-修改用户组"><a href="#groupmod-修改用户组" class="headerlink" title="groupmod 修改用户组"></a>groupmod 修改用户组</h3><ul><li><p>基本语法<br><code>groupmod</code> -n 新组名 老组名</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd xjl #新建组</span><br><span class="line">groupmod -n xjll xjl #修改组</span><br></pre></td></tr></table></figure><h2 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h2><h3 id="etc-passwd-文件"><a href="#etc-passwd-文件" class="headerlink" title="/etc/passwd 文件"></a>/etc/passwd 文件</h3><blockquote><p>用户(user)的配置文件，记录用户的各种信息；<br>每行的含义是：<code>用户名:口令:用户标志号:组标志号:注释性描述:主目录:登录shell</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看/etc/passwd文件，root用户的信息</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"># 根据查询出的信息，其中口令是加密的，这里看不出具体的内容，但可得知root用户的家目录是/root,其用户id是0，组id也是0，下面通过`id root`命令对比下</span><br><span class="line"></span><br><span class="line"># 查看root用户信息，执行命令`id root`</span><br><span class="line">uid=0(root) gid=0(root) 组=0(root)</span><br><span class="line"></span><br><span class="line"># 综上，可以看得出来，用户id、组id都是能对应的上的</span><br></pre></td></tr></table></figure><h3 id="etc-shadow-文件"><a href="#etc-shadow-文件" class="headerlink" title="/etc/shadow 文件"></a>/etc/shadow 文件</h3><blockquote><p>口令的配置文件；<br>每行的含义是：<code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看/etc/shadow文件，root用户的信息</span><br><span class="line">root:$6$BfyGGeiT64.dLa4Y$ICGVutrsuCTFxAUPedg2/.jMQEPpwOc2ND3PHqoGk2WlPhuRP8hYPllq6DJG0aPWt3ixMk2l3EYhscr9AntKR/::0:99999:7:::</span><br></pre></td></tr></table></figure><h3 id="etc-group-文件"><a href="#etc-group-文件" class="headerlink" title="/etc/group 文件"></a>/etc/group 文件</h3><blockquote><p>组(group)的配置文件，记录linux包含的组的信息<br>每行的含义是：<code>组名:口令:组标志号:组内用户列表</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看/etc/group文件，root用户的信息</span><br><span class="line">root:x:0:</span><br><span class="line"></span><br><span class="line"># 根据查询出的信息，其中口令是加密的，其组id也是0</span><br></pre></td></tr></table></figure><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><h3 id="find-查找文件或者目录"><a href="#find-查找文件或者目录" class="headerlink" title="find 查找文件或者目录"></a>find 查找文件或者目录</h3><blockquote><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p></blockquote><ul><li>基本语法<br><code>find</code> [搜索范围] [选项]</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定文件大小查找文件</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /root -name *.txt #根据文件名查找/root目录下的带有.txt后缀的文件</span><br><span class="line">find /home -user yatu #根据文件拥有者yatu查找/home目录下的的文件</span><br><span class="line">find /home -size +204800 #按文件大小：在/home目录下查找大于200m的文件（+n 大于  -n小于   n等于）</span><br></pre></td></tr></table></figure><h3 id="locate-快速定位文件路径"><a href="#locate-快速定位文件路径" class="headerlink" title="locate 快速定位文件路径"></a>locate 快速定位文件路径</h3><blockquote><p>locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate。</p></blockquote><ul><li><p>基本语法<br><code>locate</code> 搜索文件</p><blockquote><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库</p></blockquote></li><li><p>案例实践</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb  #更新locate数据库</span><br><span class="line">locate tmp #查询</span><br></pre></td></tr></table></figure></li></ul><h3 id="grep-过来查找及“-”管道符"><a href="#grep-过来查找及“-”管道符" class="headerlink" title="grep 过来查找及“|”管道符"></a>grep 过来查找及“|”管道符</h3><blockquote><p>管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p></blockquote><ul><li>基本语法<br><code>grep</code> [选项] 查找内容 源文件</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-i</td><td>忽略字母大小写</td></tr></tbody></table><ul><li>案例实践<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat anaconda-ks.cfg | grep -ni swap #不区分大小写查找swap在文件中哪些行</span><br></pre></td></tr></table></figure></li></ul><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><h3 id="gzip和gunzip"><a href="#gzip和gunzip" class="headerlink" title="gzip和gunzip"></a>gzip和gunzip</h3><ul><li><p>基本语法<br><code>gzip</code> 文件 （压缩文件，只能将文件压缩成*.gz文件）<br><code>gunzip</code> 文件.gz (解压缩文件)</p><blockquote><p>只能压缩文件,不能压缩目录;<br>不保留原来的文件;</p></blockquote></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;gzip and gunzip&quot; &gt;&gt; text.log # 往文件里面写入文本</span><br><span class="line">gzip text.log #压缩</span><br><span class="line">gunzip text.log.gz #解压</span><br></pre></td></tr></table></figure><h3 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h3><ul><li><p>基本语法<br><code>zip</code> [选项] xxx.zip 将要压缩的文件或目录 （压缩文件和目录）<br><code>unzip</code> [选项] xxx.zip (解压缩文件)</p></li><li><p>zip常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-r</td><td>递归压缩，压缩目录</td></tr></tbody></table><ul><li>unzip常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-d</td><td>指定解压后文件存放的目录</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r home.zip /home/ #压缩home目录</span><br><span class="line">unzip -d ./yatus/ home.zip #解压home.zip到./yatus目录下</span><br></pre></td></tr></table></figure><h3 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h3><ul><li><p>基本语法<br><code>tar</code> [选项] xxx.tar.gz 将要打包进去的内容 （最后打包后的文件是.tar.gz文件）</p><blockquote><p>解压常用写法：<code>tar zxvf xxx.tar.gz -C 指定解压目录</code>，如果指定<code>-C</code>参数，则指定的目录必须存在，不指定<code>-C</code>参数，则解压到当前目录</p></blockquote></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细的信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同事压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir d</span><br><span class="line">cd d</span><br><span class="line">mkdir d1 d2 d3 temp</span><br><span class="line">echo d1 &gt;&gt; d1/d1.txt</span><br><span class="line">echo d2 &gt;&gt; d2/d2.txt</span><br><span class="line">echo t1 &gt;&gt; t1.txt</span><br><span class="line">echo t2 &gt;&gt; t2.txt</span><br><span class="line"></span><br><span class="line">tar -zcvf t.tar.gz t1.txt t2.txt  #压缩多个文件</span><br><span class="line">tar -zcvf d.tar.gz d1/ d2/ d3/ #压缩多个目录</span><br><span class="line"></span><br><span class="line">rm -rf t1.txt t2.txt #删除当前目录的几个文件</span><br><span class="line">tar -zxvf t.tar.gz #将压缩的t1.txt t2.txt解压到当前目录</span><br><span class="line">tar -zxvf d.tar.gz -C temp/ #解压到指定目录</span><br></pre></td></tr></table></figure><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。<br>权限简写方式，<code>r（读，对应英文是read）</code>、<code>w（写，对应英文是write）</code>、<code>x（执行，对应英文是excute）</code></p></blockquote><p>在Linux中ls -al命令来显示一个文件的属性以及文件所属的用户和组，如果没有权限，就会出现<code>-</code>。从左到右用0-9这些数字表示，如下图所示：</p><p><img src="文件权限.png" alt></p><ul><li>各个数字表示的类型解释<br>（1）第0位表示类型，代表这个文件是目录、文件或链接文件等等。其中<code>-</code>代表文件；<code>d</code>代表目录;<code>l</code>表示链接文档；<code>c</code>表示字符设备（键盘、鼠标等）；<code>b</code>表示块文件（硬盘）；<br>（2）第1-3位可以确定属主（该文件的所有者）拥有该文件的权限（所有者）；<br>（3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限（所在组）；<br>（4）第7-9位确定其他用户拥有该文件的权限（其他组）。</li><li>一般而言，文件是谁创建的，就自然成为该文件的<code>所有者</code>；默认情况下，该文件的<code>所在组</code>是该所有者所在的组；除了文件的所有者和所在组的用户意外，系统的其他用户都是文件的<code>其他组</code>。</li><li>rwx作用文件和目录的不同解释</li></ul><table><thead><tr><th>作用到文件</th><th>作用到目录</th></tr></thead><tbody><tr><td>r代表可读(read): 可以读取，查看</td><td>r代表可读(read): 可以读取，ls查看目录内容</td></tr><tr><td>w代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</td><td>w代表可写(write): 可以修改，目录内创建+删除+重命名目录</td></tr><tr><td>x代表可执行(execute):可以被系统执行</td><td>x代表可执行(execute):可以进入该目录</td></tr></tbody></table><ul><li><p>文件基本类型解释<br><img src="ls.png" alt></p><p>（1）如果查看到是文件：链接数指的是硬链接个数。创建硬链接方法<code>ln [原文件] [目标文件]</code>，硬链接只能作用于具体的文件上，不能作用于目录<br>（2）如果查看的是文件夹：链接数指的是子文件夹个数。</p></li></ul><h3 id="chmod-改变权限"><a href="#chmod-改变权限" class="headerlink" title="chmod 改变权限"></a>chmod 改变权限</h3><blockquote><p>权限一般也用数字表示,读（read）= 4，写（write）= 2，执行（execute）= 1，也可以是组合的形式，比如4+2+1=7就是拥有读写执行权限，4+2=6就是拥有读写权限；<br>对所有者、所属组、其他组也有对应的简写方式，u（所有者）、g（所在组）、o（其他人）、a（所有人，即u、g和o的总和）。</p></blockquote><ul><li><p>基本语法<br><code>chmod</code> [{ugoa}{+-=}{rxw}] 文件或目录<br><code>chmod</code> [mode=421] 文件或目录</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建hello.txt文件</span><br><span class="line">touch hello.txt</span><br><span class="line"># 修改文件使其所有者具有读写执行权限</span><br><span class="line">chmod u+r,u+w,u+x hello.txt </span><br><span class="line"># 查看文件权限</span><br><span class="line">-rwxr--r--.  1 root root    0 5月   6 16:45 hello.txt</span><br><span class="line"># 修改文件所属组具有写权限</span><br><span class="line">chmod g+w hello.txt</span><br><span class="line"># 查看文件权限</span><br><span class="line">-rwxrw-r--.  1 root root    0 5月   6 16:45 hello.txt</span><br><span class="line"># 修改文件所有用户具有读写执行权限</span><br><span class="line">chmod a+w,a+r,a+x hello.txt </span><br><span class="line"># 查看文件权限</span><br><span class="line">-rwxrwxrwx.  1 root root    0 5月   6 16:45 hello.txt</span><br><span class="line"># 采用数字的方式，设置文件所有者、所属组、其他用户都只具有可读权限</span><br><span class="line">chmod 444 hello.txt </span><br><span class="line"># 查看文件权限</span><br><span class="line">-r--r--r--.  1 root root    0 5月   6 16:45 hello.txt</span><br><span class="line"># 修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限。</span><br><span class="line">chmod 777 ch/</span><br><span class="line"># 查看文件夹权限</span><br><span class="line">drwxrwxrwx.  2 yatu dev    34 5月   6 15:40 ch</span><br></pre></td></tr></table></figure><h3 id="chown-改变所有者"><a href="#chown-改变所有者" class="headerlink" title="chown 改变所有者"></a>chown 改变所有者</h3><ul><li><p>基本语法<br><code>chown</code> [选项] 用户 文件或目录 （改变文件或目录的所有者）</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 以root身份创建ho.txt文件    </span><br><span class="line">touch ho.txt</span><br><span class="line"># 修改ho.txt的所有者，当前是root</span><br><span class="line">chown yatu ho.txt</span><br><span class="line"># 修改后，执行ls -al ho.txt 发现所有者已经修改变成yatu</span><br><span class="line">-rw-r--r--. 1 yatu root 0 5月   6 15:34 ho.txt</span><br><span class="line"># 创建目录ch，并在里面创建文件ho.txt</span><br><span class="line">mkdir ch &amp;&amp; touch ch/ho.txt</span><br><span class="line"># 递归改变文件夹内的所有者</span><br><span class="line">chown -R yatu ch/</span><br><span class="line"># 查看目录所有者情况,ls -al | grep ch</span><br><span class="line">drwxr-xr-x.  2 yatu root   34 5月   6 15:40 ch</span><br><span class="line"># 查看ch文件的所有者cd ch &amp;&amp; ls -al</span><br><span class="line">-rw-r--r--. 1 yatu root   0 5月   6 15:40 ho.txt</span><br></pre></td></tr></table></figure><h3 id="chgrp-改变所属组"><a href="#chgrp-改变所属组" class="headerlink" title="chgrp 改变所属组"></a>chgrp 改变所属组</h3><ul><li><p>基本语法<br><code>chgrp</code> [选项] 用户组 文件或目录 （改变文件或目录的所在组）</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 以root身份查询ho.txt,执行ls -al | grep ho</span><br><span class="line">-rw-r--r--.  1 yatu root    0 5月   6 15:34 ho.txt</span><br><span class="line"># 从上可得知，该文件所在组是root，接下来修改下它的所在组为yatu，执行chgrp yatu ho.txt &amp;&amp; ls -al | grep ho</span><br><span class="line">-rw-r--r--.  1 yatu yatu    0 5月   6 15:34 ho.txt</span><br><span class="line"># 递归改变文件夹内的所在组</span><br><span class="line">chgrp -R yatu ch/</span><br><span class="line"># 查看所在组情况,执行ls -al | grep ch</span><br><span class="line">drwxr-xr-x.  2 yatu yatu   34 5月   6 15:40 ch</span><br><span class="line"># 查看ch文件的所有者，执行cd ch &amp;&amp; ls -al</span><br><span class="line">-rw-r--r--. 1 yatu yatu   0 5月   6 15:40 ho.txt</span><br><span class="line"></span><br><span class="line"># 新增用户组dev</span><br><span class="line">groupadd dev</span><br><span class="line"># 递归修改文件夹内的所有者为root，所在组是dev</span><br><span class="line">chown -R root:dev ch/</span><br><span class="line"># 查看执行情况,执行ls -al | grep ch</span><br><span class="line">drwxr-xr-x.  2 root dev    34 5月   6 15:40 ch</span><br><span class="line"># 查看ch文件夹内情况,执行cd ch/ &amp;&amp; ls -al</span><br><span class="line">-rw-r--r--. 1 root dev    0 5月   6 15:38 ch.txt</span><br></pre></td></tr></table></figure><h2 id="磁盘分区类"><a href="#磁盘分区类" class="headerlink" title="磁盘分区类"></a>磁盘分区类</h2><h3 id="df-查看磁盘空间使用情况"><a href="#df-查看磁盘空间使用情况" class="headerlink" title="df 查看磁盘空间使用情况"></a>df 查看磁盘空间使用情况</h3><ul><li>基本语法<br><code>df</code> [选项]</li><li>常见选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-h</td><td>以热凝较易阅读的格式显示</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h #查看磁盘使用情况</span><br></pre></td></tr></table></figure><h3 id="fdisk-查看分区"><a href="#fdisk-查看分区" class="headerlink" title="fdisk 查看分区"></a>fdisk 查看分区</h3><ul><li><p>基本语法<br><code>fdisk</code> [选项]</p><blockquote><p>该命令必须在root用户下才能使用</p></blockquote></li><li><p>常见选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-l</td><td>显示所有磁盘的分区列表</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l #查看磁盘分区情况</span><br></pre></td></tr></table></figure><h3 id="分区挂载和卸载"><a href="#分区挂载和卸载" class="headerlink" title="分区挂载和卸载"></a>分区挂载和卸载</h3><blockquote><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。<br>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p></blockquote><ul><li><p>基本语法<br><code>mount</code> [-t vfstype] [-o options] device dir (挂载设备)<br><code>umount</code> 设备文件名或挂载点</p></li><li><p>参数说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-t vfstype</td><td>指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：1）光盘或光盘镜像：iso9660；2）DOS fat16文件系统：msdos；3）Windows 9x fat32文件系统：vfat；4）Windows NT ntfs文件系统：ntfs；5）Mount Windows文件网络共享：smbfs；6）UNIX(LINUX) 文件网络共享：nfs。</td></tr><tr><td>-o options</td><td>主要用来描述设备或档案的挂接方式。常用的参数有：1）loop：用来把一个文件当成硬盘分区挂接上系统；2）ro：采用只读方式挂接设备；3）rw：采用读写方式挂接设备；4）iocharset：指定访问文件系统所用字符集。</td></tr><tr><td></td></tr><tr><td>device</td><td>要挂接(mount)的设备</td></tr><tr><td>dir</td><td>设备在系统上的挂接点(mount point)</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 挂载光盘镜像文件</span><br><span class="line">mkdir /mnt/cdrom/ #建立挂载点</span><br><span class="line"></span><br><span class="line"># 设备/dev/cdrom挂载到 挂载点 ：/mnt/cdrom中</span><br><span class="line">mount -t iso9660 /dev/cdrom /mnt/cdrom</span><br><span class="line"># 查看挂载情况</span><br><span class="line">ls -al /mnt/cdrom/</span><br><span class="line"># 设置开机自动挂载</span><br><span class="line">vi /etc/fstab</span><br><span class="line"># 并在文件末尾追加</span><br><span class="line">/dev/cdrom /mnt/cdrom   iso9660    defaults        0 0</span><br><span class="line"></span><br><span class="line"># 卸载光盘镜像文件</span><br><span class="line">umount /mnt/cdrom</span><br></pre></td></tr></table></figure><h2 id="进程线程类"><a href="#进程线程类" class="headerlink" title="进程线程类"></a>进程线程类</h2><blockquote><p>进程是正在执行的一个程&gt; 进程是正在执行的一个程&gt; 进程是正在执行的一个程序或命令，每一个进程都是一个运实体，都有自己的地址空间，并占用一定的系统资源。</p></blockquote><h3 id="ps-查看当前系统"><a href="#ps-查看当前系统" class="headerlink" title="ps 查看当前系统"></a>ps 查看当前系统</h3><ul><li>基本语法<br><code>ps</code> [选项]</li><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-a</td><td>选择所有进程</td></tr><tr><td>-u</td><td>显示所有用户的进程</td></tr><tr><td>-x</td><td>显示没有终端的进程</td></tr><tr><td>-e</td><td>选择所有进程，通常配合-f使用</td></tr><tr><td>-f</td><td>显示完整格式列表，通常配合-e使用</td></tr></tbody></table><ul><li>功能描述<br>1）<code>ps -aux</code>显示信息说明</li></ul><table><thead><tr><th>关键词</th><th>备注</th></tr></thead><tbody><tr><td>USER</td><td>该进程是由哪个用户产生的</td></tr><tr><td>PID</td><td>进程的ID号</td></tr><tr><td>%CPU</td><td>该进程占用CPU资源的百分比，占用越高，进程越耗费资源；</td></tr><tr><td>%MEM</td><td>该进程占用物理内存的百分比，占用越高，进程越耗费资源；</td></tr><tr><td>VSZ</td><td>该进程占用虚拟内存的大小，单位KB；</td></tr><tr><td>RSS</td><td>该进程占用实际物理内存的大小，单位KB；</td></tr><tr><td>TTY</td><td>该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端。</td></tr><tr><td>STAT</td><td>进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、s：包含子进程、+：位于后台</td></tr><tr><td>START</td><td>该进程的启动时间</td></tr><tr><td>TIME</td><td>该进程占用CPU的运算时间，注意不是系统时间</td></tr><tr><td>COMMAND</td><td>产生此进程的命令名</td></tr></tbody></table><p>2）<code>ps -ef</code>显示信息说明</p><table><thead><tr><th>关键词</th><th>备注</th></tr></thead><tbody><tr><td>UID</td><td>用户ID</td></tr><tr><td>PID</td><td>进程ID</td></tr><tr><td>PPID</td><td>父进程ID</td></tr><tr><td>C</td><td>CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高</td></tr><tr><td>STIME</td><td>进程启动的时间</td></tr><tr><td>TTY</td><td>完整的终端名称</td></tr><tr><td>TIME</td><td>CPU时间</td></tr><tr><td>CMD</td><td>启动进程所用的命令和参数</td></tr></tbody></table><blockquote><p>如果想查看进程的CPU占用率和内存占用率，可以使用aux;如果想查看进程的父进程ID可以使用ef;</p></blockquote><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看进程的CPU占用率和内存占用率</span><br><span class="line">ps -aux</span><br><span class="line"># 查看进程的父进程ID</span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure><h3 id="kill-终止进程"><a href="#kill-终止进程" class="headerlink" title="kill 终止进程"></a>kill 终止进程</h3><ul><li>基本语法<br><code>kill</code> [选项] 进程号 (通过进程号杀死进程)<br><code>killall</code> 进程名称 (通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用)</li></ul><ul><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-g</td><td>表示强迫进程立即停止</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 杀死进程</span><br><span class="line">kill -9 5102</span><br><span class="line"># 通过进程名称杀死进程</span><br><span class="line">killall firefox</span><br></pre></td></tr></table></figure><h3 id="pstree-查看进程树"><a href="#pstree-查看进程树" class="headerlink" title="pstree 查看进程树"></a>pstree 查看进程树</h3><ul><li>基本语法<br><code>pstree</code> [选项]</li></ul><ul><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-p</td><td>显示进程的PID</td></tr><tr><td>-u</td><td>显示进程的所属用户</td></tr></tbody></table><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示进程pid</span><br><span class="line">pstree -p</span><br><span class="line"># 显示进程所属用户</span><br><span class="line">pstree -u</span><br></pre></td></tr></table></figure><h3 id="top-查看系统健康状态"><a href="#top-查看系统健康状态" class="headerlink" title="top 查看系统健康状态"></a>top 查看系统健康状态</h3><ul><li>基本语法<br><code>top</code> [选项]</li></ul><ul><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><ul><li>常用操作说明</li></ul><table><thead><tr><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><ul><li>查询结果字段解释<br>1)第一行信息为任务队列信息</li></ul><table><thead><tr><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>12:26:46</td><td>系统当前时间</td></tr><tr><td>up 1 day, 13:32</td><td>系统的运行时间，本机已经运行1天13小时32分钟</td></tr><tr><td>2 users</td><td>当前登录了两个用户</td></tr><tr><td>load average: 0.00, 0.00, 0.00</td><td>系统在之前1分钟，5分钟，15分钟的平均负载。一般认为小于1时，负载较小。如果大于1，系统已经超出负荷</td></tr></tbody></table><p>2)第二行是进程信息</p><table><thead><tr><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>Tasks: 95 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>94 sleeping</td><td>睡眠的进程</td></tr><tr><td>0 stopped</td><td>正在停止的进程</td></tr><tr><td>0 zombie</td><td>僵尸进程。如果不是0，需要手工检查僵尸进程</td></tr></tbody></table><p>3）第三行为CPU信息</p><table><thead><tr><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>Cpu(s)</td><td>0.1%us 用户模式占用的CPU百分比</td></tr><tr><td>0.1%sy</td><td>系统模式占用的CPU百分比</td></tr><tr><td>0.0%ni</td><td>改变过优先级的用户进程占用的CPU百分比</td></tr><tr><td>99.7%id</td><td>空闲CPU的CPU百分比</td></tr><tr><td>0.1%wa</td><td>等待输入/输出的进程的占用CPU百分比</td></tr><tr><td>0.0%hi</td><td>硬中断请求服务占用的CPU百分比</td></tr><tr><td>0.1%si</td><td>软中断请求服务占用的CPU百分比</td></tr><tr><td>0.0%st</td><td>st（Steal time）虚拟时间百分比。就是当有虚拟机时，虚拟CPU等待实际CPU的时间百分比。</td></tr></tbody></table><p>4）第四行为物理内存信息</p><table><thead><tr><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>Mem</td><td>625344k total 物理内存的总量，单位KB</td></tr><tr><td>571504k used</td><td>已经使用的物理内存数量</td></tr><tr><td>53840k free</td><td>空闲的物理内存数量，我们使用的是虚拟机，总共只分配了628MB内存，所以只有53MB的空闲内存了</td></tr><tr><td>65800k buffers</td><td>作为缓冲的内存数量</td></tr></tbody></table><p>5）第五行为交换分区（swap）信息</p><table><thead><tr><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>Swap</td><td>524280k total 交换分区（虚拟内存）的总大小</td></tr><tr><td>0k used</td><td>已经使用的交互分区的大小</td></tr><tr><td>524280k free</td><td>空闲交换分区的大小</td></tr><tr><td>409280k cached</td><td>作为缓存的交互分区的大小</td></tr></tbody></table><h3 id="netstat-显示网络统计信息和端口占用情况"><a href="#netstat-显示网络统计信息和端口占用情况" class="headerlink" title="netstat 显示网络统计信息和端口占用情况"></a>netstat 显示网络统计信息和端口占用情况</h3><ul><li><p>基本语法<br><code>netstat</code> -anp |grep 进程号 (查看该进程网络信息)<br><code>netstat</code> -nlp | grep 端口号（查看网络端口号占用情况）</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出有在listen（监听）的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><h3 id="crond-系统定时任务"><a href="#crond-系统定时任务" class="headerlink" title="crond 系统定时任务"></a>crond 系统定时任务</h3><ul><li>启动crond服务<br>service crond restart</li><li><p>基本语法<br><code>crontab</code> [选项]</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><ul><li>参数说明<br>1) <code>crontab -e</code>会进入crontab编辑界面，会打开vim编辑器<br>任务格式：<code>* * * * * 要执行的任务</code></li></ul><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7（0和7都代表星期日）</td></tr></tbody></table><p>2) 特殊符号</p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。</td></tr><tr><td>，</td><td>代表不连续的时间。比如“0 8,12,16 <em></em> * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令</td></tr><tr><td>-</td><td>代表连续的时间范围。比如“0 5 <em></em> 1-6命令”，代表在周一到周六的凌晨5点0分执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次。比如“<em>/10 </em><em></em> * 命令”，代表每隔10分钟就执行一遍命令</td></tr></tbody></table><p>3）特定时间执行命令</p><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * * * 命令</td><td>在22点45分执行命令</td></tr><tr><td>0 17 * * 1 命令</td><td>每周1 的17点0分执行命令</td></tr><tr><td>0 5 1,15 * * 命令</td><td>每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td>40 4 * * 1-5 命令</td><td>每周一到周五的凌晨4点40分执行命令</td></tr><tr><td>*/10 4 * * * 命令</td><td>每天的凌晨4点，每隔10分钟执行一次命令</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱</td></tr></tbody></table><h3 id="服务-service-管理"><a href="#服务-service-管理" class="headerlink" title="服务(service)管理"></a>服务(service)管理</h3><blockquote><p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql , sshd 防火墙等)，因此又称为守护进程。</p></blockquote><ul><li>基本语法<br><code>service</code> 服务名 [选项]</li></ul><blockquote><p>上述操作只是临时生效，当重启系统后，还是回归以前对服务的设置,如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令;<br>在CentOS7.0后不再使用service,而是systemctl。</p></blockquote><ul><li>常用选项说明</li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>start</td><td>开启服务</td></tr><tr><td>stop</td><td>关闭服务</td></tr><tr><td>restart</td><td>重新启动服务</td></tr><tr><td>reload</td><td>重新启动服务</td></tr><tr><td>status</td><td>查看服务状态</td></tr></tbody></table><ul><li><p>查看服务名</p><ul><li>使用setup-&gt;系统服务，就可以看到；</li><li>ls -al /etc/init.d/</li></ul></li><li><p>服务的运行级别(runlevel)</p><blockquote><p>Linux系统有7种运行级别(runlevel),常用的是级别3和5;<br>查看或者修改默认级别： vi /etc/inittab</p></blockquote></li></ul><table><thead><tr><th>运行级别</th><th>备注</th></tr></thead><tbody><tr><td>运行级别0</td><td>系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</td></tr><tr><td>运行级别1</td><td>单用户工作状态，root权限，用于系统维护，禁止远程登陆</td></tr><tr><td>运行级别2</td><td>多用户状态(没有NFS)，不支持网络</td></tr><tr><td>运行级别3</td><td>完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</td></tr><tr><td>运行级别4</td><td>系统未使用，保留</td></tr><tr><td>运行级别5</td><td>X11控制台，登陆后进入图形GUI模式</td></tr><tr><td>运行级别6</td><td>系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</td></tr></tbody></table><ul><li>开机的流程说明<br><code>开机</code>-&gt;<code>BIOS</code>-&gt;<code>/boot</code>-&gt;<code>init进程</code>-&gt;<code>运行级别</code>-&gt;<code>运行级别对应的服务</code></li></ul><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><blockquote><p>通过chkconfig命令可以给每个服务的各个运行级别设置自启动/关闭<br>在CentOS7.0后不再使用chkconfig指令,而是systemctl。</p></blockquote><ul><li>基本语法<br><code>chkconfig</code> –list|grep xxx (查看服务)<br><code>chkconfig</code> 服务名 –list (查看指定服务)<br><code>chkconfig</code> –level 5 服务名 on/off （指定某个服务，某各个运行级别，开启或关闭）<br><code>chkconfig</code> 服务名 on/off (指定关闭某个五福，不管是哪个级别都关闭)</li></ul><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><ul><li>常用命令<br><code>ifconfig</code> (显示所有网络接口的配置信息)<br><code>ping</code> 目的主机 (测试主机之间网络连通性)</li></ul><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><blockquote><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe<br>是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。<br>RPM包的名称格式：Apache-1.3.23-11.i386.rpm</p><ul><li>“apache” 软件名称</li><li>“1.3.23-11”软件的版本号，主版本和此版本</li><li>“i386”是软件所运行的硬件平台，Intel 32位微处理器的统称</li><li>“rpm”文件扩展名，代表RPM包</li></ul></blockquote><ul><li><p>RPM查询命令<br><code>rpm -qa</code> (查询所安装的所有rpm软件包)</p></li><li><p>RPM卸载命令<br><code>rpm -e</code> 软件包<br><code>rpm -e</code> –nodeps 软件包<br>选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table><ul><li>RPM安装命令<br><code>rpm</code> -ivh RPM包全名</li></ul><p>选项说明</p><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-i</td><td>-i=install，安装</td></tr><tr><td>-v</td><td>-v=verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h=hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table><h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><blockquote><p>YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装</p></blockquote><ul><li><p>基本语法<br><code>yum</code> [选项] [参数]</p></li><li><p>常用选项说明</p></li></ul><table><thead><tr><th>选项</th><th>备注</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table><ul><li>常用参数说明</li></ul><table><thead><tr><th>参数</th><th>备注</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期的缓存</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;headerlink&quot; title=&quot;帮助命令&quot;&gt;&lt;/a&gt;帮助命令&lt;/h2&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.yatus.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.yatus.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux vi和vim编辑器简单使用</title>
    <link href="http://blog.yatus.cn/2018/01/07/linux-vi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.yatus.cn/2018/01/07/linux-vi和vim编辑器简单使用/</id>
    <published>2018-01-07T07:16:37.000Z</published>
    <updated>2019-05-08T13:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --><blockquote><p>vi是Unix操作系统和类Unix操作系统中最通用的文本编辑器。vim编辑器是从vi发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。vim与vi编辑器完全兼容。</p></blockquote><h4 id="vi和vim常用的三种模式"><a href="#vi和vim常用的三种模式" class="headerlink" title="vi和vim常用的三种模式"></a>vi和vim常用的三种模式</h4><h6 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h6><p>&emsp;&emsp;以vi打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理你的文件数据。</p><ul><li>常用语法</li></ul><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">yy</td><td style="text-align:center">复制光标当前一行</td></tr><tr><td style="text-align:center">y数字y</td><td style="text-align:center">复制一段（从第几行到第几行）</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">箭头移动到目的行粘贴</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">撤销上一步</td></tr><tr><td style="text-align:center">dd</td><td style="text-align:center">删除光标当前行</td></tr><tr><td style="text-align:center">d数字d</td><td style="text-align:center">删除光标（含）后多少行</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">删除一个字母，相当于del</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">删除一个字母，相当于Backspace</td></tr><tr><td style="text-align:center">yw</td><td style="text-align:center">复制一个词</td></tr><tr><td style="text-align:center">dw</td><td style="text-align:center">删除一个词</td></tr><tr><td style="text-align:center">shift+^</td><td style="text-align:center">移动到行头</td></tr><tr><td style="text-align:center">shift+$</td><td style="text-align:center">移动到行尾</td></tr><tr><td style="text-align:center">1+shift+g</td><td style="text-align:center">移动到页头，数字</td></tr><tr><td style="text-align:center">shift+g</td><td style="text-align:center">移动到页尾</td></tr><tr><td style="text-align:center">数字+shift+g</td><td style="text-align:center">移动到目标行</td></tr></tbody></table><h6 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h6><p>&emsp;&emsp;<strong>在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！</strong>要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。<br>注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。</p><ul><li>进入编辑模式常用语法</li></ul><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:center">当前光标前</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">当前光标后</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">当前光标行的下一行</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">光标所在行最前</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">光标所在行最后</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center">当前光标行的上一行</td></tr></tbody></table><ul><li>退出编辑模式，按『Esc』键退出</li></ul><h6 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h6><p>&emsp;&emsp;在一般模式当中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。在这个模式当中，可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开vi、显示行号等动作是在此模式中达成的！</p><p>基本语法</p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">:w</td><td style="text-align:center">保存</td></tr><tr><td style="text-align:center">:q</td><td style="text-align:center">退出</td></tr><tr><td style="text-align:center">:!</td><td style="text-align:center">强制退出</td></tr><tr><td style="text-align:center">/要查找的词</td><td style="text-align:center">n查找下一个，N往上查找</td></tr><tr><td style="text-align:center">?要查找的词</td><td style="text-align:center">n查找上一个，shift + n是往下查找</td></tr><tr><td style="text-align:center">:set nu</td><td style="text-align:center">显示行号</td></tr><tr><td style="text-align:center">:set nonu</td><td style="text-align:center">关闭行号</td></tr></tbody></table><h5 id="vi和vim模式的相互切换"><a href="#vi和vim模式的相互切换" class="headerlink" title="vi和vim模式的相互切换"></a>vi和vim模式的相互切换</h5><p><img src="模式间转换图.png" alt></p><h5 id="vi-vim键盘图"><a href="#vi-vim键盘图" class="headerlink" title="vi|vim键盘图"></a>vi|vim键盘图</h5><p><img src="vim键盘图.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;vi是Unix操作系统和类Unix操作系统中最通用的文本编辑器。vim编辑器是从vi发展出来的一个性能更强大的文本编辑器
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.yatus.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.yatus.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux shell编程</title>
    <link href="http://blog.yatus.cn/2018/01/07/linux-shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://blog.yatus.cn/2018/01/07/linux-shell编程/</id>
    <published>2018-01-07T01:37:18.000Z</published>
    <updated>2019-05-08T13:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --><h2 id="shell-概述"><a href="#shell-概述" class="headerlink" title="shell 概述"></a>shell 概述</h2><blockquote><ul><li>Shell是一个用C语言编写的程序，它是用户使用Linux 的桥梁;</li><li>Shell是一个命令行解释器，它接收应用程序/用户命令，然后调用操作系统内核;</li><li>Shell还是一个功能强大的编程语言，易编写、易调试、灵活性强。</li></ul></blockquote><p><img src="shell.png" alt></p><h2 id="shell-解释器"><a href="#shell-解释器" class="headerlink" title="shell 解释器"></a>shell 解释器</h2><h3 id="linux-提供了哪些shell解释器"><a href="#linux-提供了哪些shell解释器" class="headerlink" title="linux 提供了哪些shell解释器"></a>linux 提供了哪些shell解释器</h3><p>linux中/etc/shells文件存放了默认提供的shell解释器，执行<code>cat /etc/shells</code>可以查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">cat /etc/shells</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><h3 id="查看系统默认解释器"><a href="#查看系统默认解释器" class="headerlink" title="查看系统默认解释器"></a>查看系统默认解释器</h3><p>Linux中可以通过输出<code>$SHELL</code>系统变量获得系统默认的解释器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">echo `$SHELL`</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h2 id="shell-脚本入门"><a href="#shell-脚本入门" class="headerlink" title="shell 脚本入门"></a>shell 脚本入门</h2><h3 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h3><p>脚本内容以<code>#!/bin/bash</code>开头（指定解析器）</p><h3 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h3><ul><li>采用<code>bash</code>或<code>sh</code>+脚本的相对路径或绝对路径（不用赋予脚本+x权限,本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限）</li><li>采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x,本质是脚本需要自己执行，所以需要执行权限）</li></ul><h3 id="第一个shell脚本：helloworld"><a href="#第一个shell脚本：helloworld" class="headerlink" title="第一个shell脚本：helloworld"></a>第一个shell脚本：helloworld</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个Shell脚本，输出helloworld</span><br><span class="line">touch helloworld.sh</span><br><span class="line"># 在文件中输入如下内容</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo &apos;hello world!&apos;</span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./helloworld.sh</span><br></pre></td></tr></table></figure><h3 id="第二个Shell脚本：多命令处理"><a href="#第二个Shell脚本：多命令处理" class="headerlink" title="第二个Shell脚本：多命令处理"></a>第二个Shell脚本：多命令处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个Shell脚本，输出helloworld</span><br><span class="line">touch batch.sh</span><br><span class="line"># 在文件中输入如下内容</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line">touch batch.txt</span><br><span class="line">ls -al &gt;&gt; batch.txt</span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./batch.sh</span><br></pre></td></tr></table></figure><h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><ul><li>常用系统变量：<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等</li><li>案例实践</li></ul><blockquote><p>使用<code>set</code>命令可以查询出当前shell中的所有变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前用户的家目录</span><br><span class="line">echo $HOME</span><br><span class="line"># 结果是</span><br><span class="line">/Users/yatu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示当前shell中的所有变量</span><br><span class="line">set</span><br></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><h4 id="n变量"><a href="#n变量" class="headerlink" title="$n变量"></a>$n变量</h4><ul><li><p>基本语法<br><code>$n</code>（n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 输出该脚本文件名称、输入参数1和输入参数2的值</span><br><span class="line">touch parameter.sh</span><br><span class="line"># 在文件中输入如下内容</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;$0 $1 $2&quot;</span><br><span class="line"></span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./parameter.sh p1 p2</span><br><span class="line"></span><br><span class="line"># 输出结果是</span><br><span class="line">./parameter.sh p1 p2</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="$#变量"></a>$#变量</h4><ul><li><p>基本语法<br><code>$#</code>（获取所有输入参数个数）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 获取输入参数的个数</span><br><span class="line"># 继续在文件parameter.sh末尾追加如下内容</span><br><span class="line">echo $#</span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./parameter.sh p1 p2</span><br><span class="line"></span><br><span class="line"># 输出结果是</span><br><span class="line">./parameter.sh p1 p2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="变量-1"><a href="#变量-1" class="headerlink" title="$*变量"></a>$*变量</h4><ul><li><p>基本语法<br><code>$*</code>（这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 获取输入参数的个数</span><br><span class="line"># 继续在文件parameter.sh末尾追加如下内容</span><br><span class="line">echo $*</span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./parameter.sh p1 p2</span><br><span class="line"></span><br><span class="line"># 输出结果是</span><br><span class="line">./parameter.sh p1 p2</span><br><span class="line">2</span><br><span class="line">p1 p2</span><br></pre></td></tr></table></figure><h4 id="变量-2"><a href="#变量-2" class="headerlink" title="$@变量"></a>$@变量</h4><ul><li><p>基本语法<br><code>$@</code>（这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取输入参数的个数</span><br><span class="line"># 继续在文件parameter.sh末尾追加如下内容</span><br><span class="line">echo $@</span><br><span class="line"># 执行脚本,使用sh或bash均可</span><br><span class="line">sh ./parameter.sh p1 p2</span><br><span class="line"></span><br><span class="line"># 输出结果是</span><br><span class="line">./parameter.sh p1 p2</span><br><span class="line">2</span><br><span class="line">p1 p2</span><br><span class="line">p1 p2</span><br></pre></td></tr></table></figure><h4 id="？变量"><a href="#？变量" class="headerlink" title="$？变量"></a>$？变量</h4><ul><li><p>基本语法<br><code>$?</code>（最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了）</p></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 继续在文件parameter.sh脚本是否正确执行</span><br><span class="line">sh ./parameter.sh p1 p</span><br><span class="line">echo $?</span><br><span class="line"># 结果是</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>定义变量：<code>变量=值</code></li><li>撤销变量：<code>unset 变量</code></li><li>声明静态变量：<code>readonly变量</code>(注意：<strong>静态变量不能unset</strong>)</li></ul><blockquote><p>可把变量提升为全局环境变量，可供其他Shell程序使用，语法是<code>export 变量名</code></p></blockquote><h4 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h4><ul><li>变量名称可以由<code>字母</code>、<code>数字</code>和<code>下划线</code>组成，但是<strong>不能以数字开头</strong>，<strong>环境变量名建议大写</strong>；</li><li><strong>等号两侧不能有空格</strong>；</li><li><strong>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</strong>；</li><li><strong>变量的值如果有空格，需使用双引号或单引号括起来</strong>。</li></ul><h4 id="案例实践"><a href="#案例实践" class="headerlink" title="案例实践"></a>案例实践</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 定义变量a</span><br><span class="line">&gt; a=5</span><br><span class="line">&gt; echo $a</span><br><span class="line"># 结果是</span><br><span class="line">  5</span><br><span class="line"></span><br><span class="line"># 给变量a重新赋值</span><br><span class="line">&gt; a=8</span><br><span class="line">&gt; echo $a</span><br><span class="line"># 结果是</span><br><span class="line">  8</span><br><span class="line"></span><br><span class="line"># 撤销变量a</span><br><span class="line">&gt; unset a</span><br><span class="line">&gt; echo $a</span><br><span class="line"># 结果是</span><br><span class="line"></span><br><span class="line"># 声明静态的变量b=2，不能unset</span><br><span class="line">&gt; readonly b=2</span><br><span class="line">&gt; echo $b</span><br><span class="line"># 结果是</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line"># 尝试修改静态变量b</span><br><span class="line">&gt; b=9</span><br><span class="line"># 结果是</span><br><span class="line">  -bash: b: readonly variable</span><br><span class="line"></span><br><span class="line"># 在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</span><br><span class="line">&gt; c=1+2</span><br><span class="line">&gt; echo $c</span><br><span class="line"># 结果是</span><br><span class="line">  1+2</span><br><span class="line"></span><br><span class="line"># 变量的值如果有空格，需要使用双引号或单引号括起来</span><br><span class="line">&gt; d=hello world</span><br><span class="line"># 结果是</span><br><span class="line">  -bash: world: command not found</span><br><span class="line"></span><br><span class="line">&gt; d=&quot;hello world&quot;</span><br><span class="line">&gt; echo $d</span><br><span class="line"># 结果是</span><br><span class="line">  hello world</span><br></pre></td></tr></table></figure><h2 id="shell-运算符"><a href="#shell-运算符" class="headerlink" title="shell 运算符"></a>shell 运算符</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>$((运算式))</code>或<code>$[运算式]</code></li><li><code>expr 参数1 运算符 参数2</code> （运算符有：加+，减-，乘*，除/，取余%）</li></ul><blockquote><ul><li><strong>expr运算符间要有空格</strong>;</li><li><strong>第一种方式不能直接终端输出，需要赋值给指定的变量，如<code>c=$((2 * 3))</code>或<code>c=$[2*3]</code></strong></li></ul></blockquote><h3 id="案例实践-1"><a href="#案例实践-1" class="headerlink" title="案例实践"></a>案例实践</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 计算3+2的值</span><br><span class="line">&gt; expr 2 + 3</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"># 计算3-2的值</span><br><span class="line">expr 3 - 2 </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"># 计算（2+3）X4的值</span><br><span class="line"># expr一步完成计算</span><br><span class="line">&gt; expr `expr 2 + 3` \* 4 </span><br><span class="line">20</span><br><span class="line"></span><br><span class="line"># 采用$[运算式]方式</span><br><span class="line">&gt; r=$[(2+3)*4]</span><br><span class="line">&gt; echo $r</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h2 id="shell-条件判断"><a href="#shell-条件判断" class="headerlink" title="shell 条件判断"></a>shell 条件判断</h2><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>[ condition ]</code></li></ul><blockquote><p><strong>condition前后要有<code>空格</code>;条件非空即为true，[ notempty ]返回true，[ ] 返回false</strong></p></blockquote><h3 id="常用判断条件"><a href="#常用判断条件" class="headerlink" title="常用判断条件"></a>常用判断条件</h3><ul><li>两个<code>整数</code>之间的比较</li></ul><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>字符串比较</td></tr><tr><td>-lt</td><td>小于</td></tr><tr><td>-le</td><td>小于等于</td></tr><tr><td>-eq</td><td>等于</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-ge</td><td>大于等于</td></tr><tr><td>-ne</td><td>不等于</td></tr></tbody></table><ul><li>按照文件权限进行判断</li></ul><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>-r</td><td>有读的权限</td></tr><tr><td>-w</td><td>有写的权限</td></tr><tr><td>-x</td><td>有执行的权限</td></tr></tbody></table><ul><li>按照文件类型进行判断</li></ul><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>-f</td><td>文件存在并且是一个常规的文件</td></tr><tr><td>-d</td><td>文件存在并是一个目录</td></tr><tr><td>-e</td><td>文件存在</td></tr></tbody></table><h3 id="案例实践-2"><a href="#案例实践-2" class="headerlink" title="案例实践"></a>案例实践</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 50是否大于等于22</span><br><span class="line">&gt; [ 50 -ge 22 ]</span><br><span class="line">&gt; echo $?</span><br><span class="line"># 结果是</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># helloworld.sh是否具有写权限</span><br><span class="line">&gt; [ -w helloworld.sh ]</span><br><span class="line">&gt; echo $?</span><br><span class="line"># 结果是</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"># 判断/home/yatu/batch.txt目录中的文件是否存在</span><br><span class="line">&gt; [ -e /home/atguigu/cls.txt ]</span><br><span class="line">&gt; echo $?</span><br><span class="line"># 结果是</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="shell-流程控制"><a href="#shell-流程控制" class="headerlink" title="shell 流程控制"></a>shell 流程控制</h2><h3 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h3><ul><li>基本语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then </span><br><span class="line">  程序 </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">if [ 条件判断式 ] </span><br><span class="line">  then </span><br><span class="line">    程序 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>[ 条件判断式 ]</code>，中括号和条件判断式之间必须有<code>空格</code>;<code>if后也要有空格</code></p></blockquote><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 输入一个数字，如果是1，则输出hello，如果是2，则输出world，如果是其它，什么也不输出</span><br><span class="line"># 新建文件</span><br><span class="line">touch if.sh</span><br><span class="line"># 编辑文件，写入如下信息</span><br><span class="line">#!/bin/bash</span><br><span class="line">  </span><br><span class="line">if [ $1 -eq &apos;1&apos; ];then</span><br><span class="line">        echo hello</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $1 -eq &apos;2&apos; ]</span><br><span class="line">then</span><br><span class="line">        echo world</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行 sh ./if.sh 1</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="case-判断"><a href="#case-判断" class="headerlink" title="case 判断"></a>case 判断</h3><ul><li>基本语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line">  &quot;值1&quot;） </span><br><span class="line">    如果变量的值等于值1，则执行程序1 </span><br><span class="line">    ;; </span><br><span class="line">  &quot;值2&quot;） </span><br><span class="line">    如果变量的值等于值2，则执行程序2 </span><br><span class="line">    ;; </span><br><span class="line">  …省略其他分支… </span><br><span class="line">  *） </span><br><span class="line">    如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line">    ;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><blockquote><ul><li>case行尾必须为<code>单词in</code>，每一个模式匹配必须以右括号<code>）</code>结束</li><li>双分号<code>;;</code>表示命令序列结束，相当于java中的break。</li><li>最后的<code>*）</code>表示默认模式，相当于java中的default。</li></ul></blockquote><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 还是上面if那个例子</span><br><span class="line"># 新建文件</span><br><span class="line">touch case.sh</span><br><span class="line"># 编辑文件，写入如下信息</span><br><span class="line">#!/bin/bash</span><br><span class="line">  </span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;hello&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;world&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行 sh ./case.sh 2</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><ul><li>基本语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (( 初始值;循环控制条件;变量变化 )) </span><br><span class="line">  do </span><br><span class="line">    程序 </span><br><span class="line">  done</span><br></pre></td></tr></table></figure><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 计算1到100的累计</span><br><span class="line"># 新建文件</span><br><span class="line">touch for.sh</span><br><span class="line"># 编辑文件，写入如下信息</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line">for ((i=1;i&lt;=100;i++))</span><br><span class="line">  do</span><br><span class="line">   sum=$[$sum + $i]</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">echo $sum</span><br><span class="line"># 执行 sh ./for.sh</span><br><span class="line"># 结果</span><br><span class="line">  5050</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><ul><li>基本语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ] </span><br><span class="line">  do </span><br><span class="line">    程序</span><br><span class="line">  done</span><br></pre></td></tr></table></figure><ul><li>案例实践<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 还是for那个例子</span><br><span class="line"># 新建文件</span><br><span class="line">touch while.sh</span><br><span class="line"># 编辑文件，写入如下信息</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line"> do </span><br><span class="line">    sum=$[$sum + $i]</span><br><span class="line">    i=$[$i + 1]</span><br><span class="line"> done</span><br><span class="line"></span><br><span class="line">echo $sum</span><br><span class="line"># 执行 sh ./while.sh</span><br><span class="line"># 结果</span><br><span class="line">  5050</span><br></pre></td></tr></table></figure></li></ul><h2 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul><li><p>常用系统函数</p><ul><li><p><code>basename</code>基本语法<br><code>basename</code> [string / pathname] [suffix]</p><blockquote><ul><li><code>basename</code>命令会删掉所有的前缀包括最后一个<code>/</code>字符，然后将字符串显示出来;</li><li><code>suffix</code>为后缀，如果suffix被指定了，basename会将pathname或string中的suffix<code>去掉</code>;</li></ul></blockquote></li><li><p><code>dirname</code>基本语法<br><code>dirname</code> 文件绝对路径</p><blockquote><ul><li><code>dirname</code>命令从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）;</li></ul></blockquote></li></ul></li><li><p>案例实践</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 截取该/home/yatu/batch.txt路径的文件名称</span><br><span class="line">&gt; basename /home/yatu/batch.txt </span><br><span class="line"># 结果是</span><br><span class="line">  batch.txt</span><br><span class="line"></span><br><span class="line">&gt; basename /home/yatu/batch.txt .txt</span><br><span class="line"># 结果是</span><br><span class="line">  batch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># batch.txt文件的路径</span><br><span class="line">&gt; dirname /home/yatu/batch.txt </span><br><span class="line">/home/yatu</span><br></pre></td></tr></table></figure><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ul><li>基本语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br><span class="line">funname</span><br></pre></td></tr></table></figure><blockquote><ul><li>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译;</li><li>函数返回值，只能通过$?系统变量获得，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)</li></ul></blockquote><ul><li>案例实践</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 计算两个输入参数的和</span><br><span class="line"># 新建文件</span><br><span class="line">touch fun.sh</span><br><span class="line"># 编辑文件，写入如下信息</span><br><span class="line">#!/bin/bash</span><br><span class="line">  </span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">  s=0</span><br><span class="line">  s=$[$1 + $2]</span><br><span class="line">  echo $s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read -p &quot;Please input the number1: &quot; n1;</span><br><span class="line">read -p &quot;Please input the number2: &quot; n2;</span><br><span class="line">sum $n1 $n2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行 sh ./fun.sh</span><br><span class="line">Please input the number1: 20</span><br><span class="line">Please input the number2: 51</span><br><span class="line"></span><br><span class="line"># 结果是</span><br><span class="line">  71</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;shell-概述&quot;&gt;&lt;a href=&quot;#shell-概述&quot; class=&quot;headerlink&quot; title=&quot;shell 概述&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.yatus.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.yatus.cn/tags/linux/"/>
    
      <category term="shell" scheme="http://blog.yatus.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>linux文件目录结构</title>
    <link href="http://blog.yatus.cn/2018/01/06/linux%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.yatus.cn/2018/01/06/linux文件目录结构/</id>
    <published>2018-01-06T02:37:18.000Z</published>
    <updated>2019-05-08T13:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --><blockquote><p>在linux里，一切皆是文件，linux的文件系统是采用级层是的树状目录结构，在此结构中的最上层是根目录<code>/</code>，然后在此目录下在创建其他的目录。</p></blockquote><h6 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h6><blockquote><p>linux对数据文件(.mp3、.bmp)，程序文件(.c、.h、*.o)，设备文件（LCD、触摸屏、鼠标），网络文件(socket) 等的管理都抽象为文件，使用统一的方式方法管理。</p></blockquote><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>普通文件(数据文件)</td><td>普通文件是用于存放数据、程序等信息的文件，一般都长期地存放在外存储器（磁盘）中。普通文件又分为文本文件和二进制文件</td></tr><tr><td>目录文件</td><td>目录文件是文件系统中一个目录所包含的目录项所组成的文件</td></tr><tr><td>设备文件</td><td>设备文件是用于为操作系统与设备提供连接的一种文件。在Linux系统中将设备作为文件来处理，操作设备就像是操作普通文件一样。每一个设备对应一个设备文件，存放在 /dev 目录中</td></tr><tr><td>链接文件</td><td>似于 windows 下的快捷方式，链接又可以分为软链接（符号链接）和硬链接</td></tr><tr><td>管道文件</td><td>管道文件主要用于在进程间传递数据的一种特殊文件</td></tr><tr><td>套接口文件</td><td>主要用于不同计算机间网络通信的一种特殊文件</td></tr></tbody></table><h6 id="Linux文件目录速览"><a href="#Linux文件目录速览" class="headerlink" title="Linux文件目录速览"></a>Linux文件目录速览</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── /         //根目录</span><br><span class="line">│   ├── root            //超级管理员root的家目录</span><br><span class="line">│   ├── bin             //常用的命令</span><br><span class="line">│   ├── boot            //放置一些启动用的临时文件</span><br><span class="line">│   ├── dev             //设备文件</span><br><span class="line">│   ├── etc             //系统所有配置文件都放在它下面</span><br><span class="line">│   ├── home            //用户目录，对应权限用户只能查看到自己的目录</span><br><span class="line">│   │   ├── yatu        //登录名yatu的家目录</span><br><span class="line">│   ├── lib             //用于存取程序的动态库和模块文件</span><br><span class="line">│   ├── lost+found      //用于存放系统异常时丢失的文件</span><br><span class="line">│   ├── media           //用于挂在本地磁盘或者其他储存设备</span><br><span class="line">│   ├── mnt             //用于挂在其他临时系统文件</span><br><span class="line">│   ├── opt             //用于存放第三方软件包的目录</span><br><span class="line">│   ├── proc            //包含进程等信息，不是内存映射，不是真实目录</span><br><span class="line">│   ├── sbin            //里面很多是root用户才能执行的命令，系统的更新备份还原和开关机用的</span><br><span class="line">│   ├── selinux         //</span><br><span class="line">│   ├── srv             //service的缩写，是一些网路服务启动后，这些服务所需取用资料目录</span><br><span class="line">│   ├── sys             //系统信息</span><br><span class="line">│   ├── tmp             //存放各种临时文件</span><br><span class="line">│   ├── usr             //我们主要的操作空间</span><br><span class="line">│   ├── var             //变量文件--在运行中内容不断变化的文件。</span><br><span class="line">│   └── ...</span><br></pre></td></tr></table></figure><h6 id="Linux目录详解"><a href="#Linux目录详解" class="headerlink" title="Linux目录详解"></a>Linux目录详解</h6><ul><li><code>/</code>, linux系统的根目录</li><li><code>/root</code>，该目录是系统管理员，也称作超级权限者的用户主目录</li><li><code>/bin</code>，bin是Binary英文的缩写，这个目录存放着最经常使用的命令</li><li><code>/sbin</code>，s就是super user的意思，这里存放的是系统管理员使用的系统管理程序</li><li><code>/home</code>，存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</li><li><code>/etc</code>，存放着所有的系统管理所需要的配置文件和子目录</li><li><code>/usr</code>，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录</li><li><code>/usr/local</code>，这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li><li><code>/boot</code>，这里存放的是启动linux时使用的一些核心文件，包括一些链接文件以及镜像文件</li><li><code>/media</code>，linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</li><li><code>/mnt</code>，系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了</li><li><code>/var</code>，这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</li><li><code>/lib</code>,系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</li><li><code>/lost+found</code>，该目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li><li><code>/proc</code>，这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</li><li><code>/srv</code>，service缩写，该目录存放一些服务启动之后需要提取的数据</li><li><code>/sys</code>，这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</li><li><code>/tmp</code>，这个目录是用来存放一些临时文件的</li><li><code>/dev</code>，类似于windows的设备管理器，把所有的硬件用文件的形式存储</li><li><code>/opt</code>，这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下，默认为空</li><li><code>/selinux</code>，全称是security-enhanced linux，类似360，SELinux是一种安全子系统,它能控制程序只能访问特定文件</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 08 2019 21:46:57 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;在linux里，一切皆是文件，linux的文件系统是采用级层是的树状目录结构，在此结构中的最上层是根目录&lt;code&gt;/&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.yatus.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.yatus.cn/tags/linux/"/>
    
  </entry>
  
</feed>
